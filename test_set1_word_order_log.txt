

\========================================================================
# 1
['Pekka', 'ihailee', 'Merjaa']


			=None

1.

		Next word contains multiple morphemes ['$nom', '$D', 'Pekka-']
		Storing inflectional feature ['-', 'LANG:FI', 'TAIL:CAT:T/fin,!COMP:*'] into working memory.

		Consume "$D"

			=None

2.

		Adding inflectional features to D
		= ['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:T/fin,!COMP:*']
			=D

3.

		Consume "Pekka"

		D + Pekka
			Filtering out impossible merge sites...
			Sink "Pekka" into D because they are inside the same phonological word.
		Exploring solution number (1) =[D*Pekka]
			=D{N}

4.

		Next word contains multiple morphemes ['$T/fin', '$v', 'ihaile-']

		Consume "T"

		D{N} + T
			Filtering out impossible merge sites...
			=[[D Pekka] T]

5.

		Consume "v"

		[[D Pekka] T] + v
			Filtering out impossible merge sites...
			Sink "v" into T because they are inside the same phonological word.
		Exploring solution number (1) =[T*v]
			=[[D Pekka] T{v}]

6.

		Consume "ihailee"

		[[D Pekka] T{v}] + ihailee
			Filtering out impossible merge sites...
			Sink "ihailee" into T{v} because they are inside the same phonological word.
		Exploring solution number (1) =[T{v}*ihailee]
			=[[D Pekka] T{v,V}]

7.

		Next word contains multiple morphemes ['$par', '$D', 'Merjaa-']
		Storing inflectional feature ['-', 'LANG:FI', 'TAIL:!COMP:*,-PHI'] into working memory.

		Consume "$D"

			=[[D Pekka] T{v,V}]

8.

		Adding inflectional features to D
		= ['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:!COMP:*,-PHI']

		Consume "D"

		[[D Pekka] T{v,V}] + D
			Filtering out impossible merge sites...
				Reject [[<D Pekka> [T [<D Pekka> [v ihailee]]]] D] due to bad left branch.
			=[[D Pekka] [T{v,V} D]]

9.

		Consume "Merjaa"

		[[D Pekka] [T{v,V} D]] + Merjaa
			Filtering out impossible merge sites...
			Sink "Merjaa" into D because they are inside the same phonological word.
		Exploring solution number (1) =[D*Merjaa]
			=[[D Pekka] [T{v,V} D{N}]]

10.
	>>>	Trying candidate parse [[D Pekka] [T{v,V} D{N}]] (1.)
		Reversing movement.
			!Reconstructing head movement for [[D Pekka] [T{v,V} D{N}]].
				Extracted head "v{V}" and reconstructed it = [[D Pekka] [T [v{V} D{N}]]]
				Extracted head "ihailee" and reconstructed it = [[D Pekka] [T [v [ihailee D{N}]]]]
				Extracted head "Merjaa" from D and created [[D Pekka] [T [v [ihailee [D Merjaa]]]]]
			!Dropping floaters...
				[D Pekka] failed to tail [!COMP:*][CAT:T/fin]
				<D Pekka> was made an adjunct.
				Floater <D Pekka> dropped.
				= [<D Pekka> [T [<D Pekka> [v [ihailee [D Merjaa]]]]]]
			!Dropping A-/A-bar movement with Chesi memory buffer.
			= [<D Pekka> [T [<D Pekka> [v [ihailee [D Merjaa]]]]]]
		Checking LF-interface conditions.
			Trying to transfer [<D Pekka>:1 [T [<DP>:1 [v [ihailee [D Merjaa]]]]]] into LF...
				Transfer to LF successful.
!--->		Tests passed (with 10/74 operations) <------------------------------------
		Solution:
		[<D Pekka> [T [<D Pekka> [v [ihailee [D Merjaa]]]]]]
		Grammar: [<D Pekka>:1 [T [<DP>:1 [v [ihailee [D Merjaa]]]]]]
		Spellout T/finP = [DP:1 [T/fin [__:1 [v [V [D N]]]]]]
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D']
Pekka:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Pekka', 'PF:Pekka', 'SPEC:A']
T:['!COMP:*', '!PROBE:CAT:V', '!SPEC:*', '+PHI', '-COMP:D', '-SPEC:FORCE', '-SPEC:N', '-SPEC:T/fin', '-SPEC:V', 'CAT:T/fin', 'COMP:V', 'COMP:v', 'LANG:FI', 'LF:T', 'NUM:sg', 'PER:3', 'PF:T']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:T/fin,!COMP:*', 'null']
Pekka:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Pekka', 'PF:Pekka', 'SPEC:A', 'null']
v:['!COMP:*', '!PROBE:CAT:D', '!PROBE:CAT:V', '!SPEC:D', '-PHI', '-SPEC:N', 'CAT:v', 'COMP:V', 'LANG:FI', 'LF:v', 'PF:v']
ihailee:['!COMP:D', '-COMP:ADV', '-COMP:N', '-COMP:V', '-SPEC:FORCE', '-SPEC:T/fin', 'CAT:V', 'COMP:P', 'LANG:FI', 'LF:admire', 'PF:ihailee', 'SPEC:ADV', 'SPEC:D', 'SPEC:P']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:!COMP:*,-PHI']
Merjaa:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'PF:Merjaa', 'SPEC:A']

D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D']
Pekka:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Pekka', 'PF:Pekka', 'SPEC:A']
T:['!COMP:*', '!PROBE:CAT:V', '!SPEC:*', '+PHI', '-COMP:D', '-SPEC:FORCE', '-SPEC:N', '-SPEC:T/fin', '-SPEC:V', 'CAT:T/fin', 'COMP:V', 'COMP:v', 'LANG:FI', 'LF:T', 'NUM:sg', 'PER:3', 'PF:T']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:T/fin,!COMP:*', 'null']
Pekka:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Pekka', 'PF:Pekka', 'SPEC:A', 'null']
v:['!COMP:*', '!PROBE:CAT:D', '!PROBE:CAT:V', '!SPEC:D', '-PHI', '-SPEC:N', 'CAT:v', 'COMP:V', 'LANG:FI', 'LF:v', 'PF:v']
ihailee:['!COMP:D', '-COMP:ADV', '-COMP:N', '-COMP:V', '-SPEC:FORCE', '-SPEC:T/fin', 'CAT:V', 'COMP:P', 'LANG:FI', 'LF:admire', 'PF:ihailee', 'SPEC:ADV', 'SPEC:D', 'SPEC:P']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:!COMP:*,-PHI']
Merjaa:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'PF:Merjaa', 'SPEC:A']

D: [D]
Pekka: [N, D]
T: [T/fin]
(D): [D, T/fin]
(N): [N, D, T/fin]
v: [v, T/fin]
ihailee: [V, v, T/fin]
D: [D, V, v, T/fin]
Merjaa: [N, D, V, v, T/fin]

			Checking if the sentence is ambiguous...


\========================================================================
# 2
['IHAILEE', 'Pekka', 'Merjaa']


			=None

1.

		Next word contains multiple morphemes ['$Q', '$C/fin', '$T/fin', '$v', 'ihaile-']
		Storing inflectional feature ['-', 'CAT:Q', 'LANG:FI'] into working memory.

		Consume "$C/fin"

			=None

2.

		Adding inflectional features to C
		= ['!COMP:*', '!PROBE:CAT:T/fin', '-', '-SPEC:C/fin', '-SPEC:N', '-SPEC:T/fin', 'CAT:C/fin', 'CAT:C/fin/Q', 'CAT:Q', 'COMP:T/fin', 'LANG:FI', 'LF:C/fin', 'PF:C', 'SPEC:*']
			=C

3.

		Consume "T"

		C + T
			Filtering out impossible merge sites...
			Sink "T" into C because they are inside the same phonological word.
		Exploring solution number (1) =[C*T]
			=C{T/fin}

4.

		Consume "v"

		C{T/fin} + v
			Filtering out impossible merge sites...
			Sink "v" into C{T/fin} because they are inside the same phonological word.
		Exploring solution number (1) =[C{T/fin}*v]
			=C{T/fin,v}

5.

		Consume "ihailee"

		C{T/fin,v} + ihailee
			Filtering out impossible merge sites...
			Sink "ihailee" into C{T/fin,v} because they are inside the same phonological word.
		Exploring solution number (1) =[C{T/fin,v}*ihailee]
			=C{T/fin,v,V}

6.

		Next word contains multiple morphemes ['$nom', '$D', 'Pekka-']
		Storing inflectional feature ['-', 'LANG:FI', 'TAIL:CAT:T/fin,!COMP:*'] into working memory.

		Consume "$D"

			=C{T/fin,v,V}

7.

		Adding inflectional features to D
		= ['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:T/fin,!COMP:*']

		Consume "D"

		C{T/fin,v,V} + D
			Filtering out impossible merge sites...
			=[C{T/fin,v,V} D]

8.

		Consume "Pekka"

		[C{T/fin,v,V} D] + Pekka
			Filtering out impossible merge sites...
			Sink "Pekka" into D because they are inside the same phonological word.
		Exploring solution number (1) =[D*Pekka]
			=[C{T/fin,v,V} D{N}]

9.

		Next word contains multiple morphemes ['$par', '$D', 'Merjaa-']
		Storing inflectional feature ['-', 'LANG:FI', 'TAIL:!COMP:*,-PHI'] into working memory.

		Consume "$D"

			=[C{T/fin,v,V} D{N}]

10.

		Adding inflectional features to D
		= ['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:!COMP:*,-PHI']

		Consume "D"

		[C{T/fin,v,V} D{N}] + D
			Filtering out impossible merge sites...
				Reject [[C{T/fin,v,V} <D Pekka>] D] due to bad left branch.
			=[C{T/fin,v,V} [[D Pekka] D]]

11.

		Consume "Merjaa"

		[C{T/fin,v,V} [[D Pekka] D]] + Merjaa
			Filtering out impossible merge sites...
			Sink "Merjaa" into D because they are inside the same phonological word.
		Exploring solution number (1) =[D*Merjaa]
			=[C{T/fin,v,V} [[D Pekka] D{N}]]

12.
	>>>	Trying candidate parse [C{T/fin,v,V} [[D Pekka] D{N}]] (1.)
		Reversing movement.
			!Reconstructing head movement for [C{T/fin,v,V} [[D Pekka] D{N}]].
				Extracted head "T{v,V}" and reconstructed it = [C [[D Pekka] [T{v,V} D{N}]]]
				Extracted head "v{V}" and reconstructed it = [C [[D Pekka] [T [v{V} D{N}]]]]
				Extracted head "ihailee" and reconstructed it = [C [[D Pekka] [T [v [ihailee D{N}]]]]]
				Extracted head "Merjaa" from D and created [C [[D Pekka] [T [v [ihailee [D Merjaa]]]]]]
			!Dropping floaters...
				[D Pekka] failed to tail [!COMP:*][CAT:T/fin]
				<D Pekka> was made an adjunct.
				Floater <D Pekka> dropped.
				= [C [<D Pekka> [T [<D Pekka> [v [ihailee [D Merjaa]]]]]]]
			!Dropping A-/A-bar movement with Chesi memory buffer.
			= [C [<D Pekka> [T [<D Pekka> [v [ihailee [D Merjaa]]]]]]]
		Checking LF-interface conditions.
			Trying to transfer [C [<D Pekka>:1 [T [<DP>:1 [v [ihailee [D Merjaa]]]]]]] into LF...
				Transfer to LF successful.
!--->		Tests passed (with 12/88 operations) <------------------------------------
		Solution:
		[C [<D Pekka> [T [<D Pekka> [v [ihailee [D Merjaa]]]]]]]
		Grammar: [C [<D Pekka>:1 [T [<DP>:1 [v [ihailee [D Merjaa]]]]]]]
		Spellout C/finQP = [C/finQ [DP:1 [T/fin [__:1 [v [V [D N]]]]]]]
C:['!COMP:*', '!PROBE:CAT:T/fin', '-', '-SPEC:C/fin', '-SPEC:N', '-SPEC:T/fin', 'CAT:C/fin', 'CAT:C/fin/Q', 'CAT:Q', 'COMP:T/fin', 'LANG:FI', 'LF:C/fin', 'PF:C', 'SPEC:*']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D']
Pekka:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Pekka', 'PF:Pekka', 'SPEC:A']
T:['!COMP:*', '!PROBE:CAT:V', '!SPEC:*', '+PHI', '-COMP:D', '-SPEC:FORCE', '-SPEC:N', '-SPEC:T/fin', '-SPEC:V', 'CAT:T/fin', 'COMP:V', 'COMP:v', 'LANG:FI', 'LF:T', 'NUM:sg', 'PER:3', 'PF:T']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:T/fin,!COMP:*', 'null']
Pekka:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Pekka', 'PF:Pekka', 'SPEC:A', 'null']
v:['!COMP:*', '!PROBE:CAT:D', '!PROBE:CAT:V', '!SPEC:D', '-PHI', '-SPEC:N', 'CAT:v', 'COMP:V', 'LANG:FI', 'LF:v', 'PF:v']
ihailee:['!COMP:D', '-COMP:ADV', '-COMP:N', '-COMP:V', '-SPEC:FORCE', '-SPEC:T/fin', 'CAT:V', 'COMP:P', 'LANG:FI', 'LF:admire', 'PF:ihailee', 'SPEC:ADV', 'SPEC:D', 'SPEC:P']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:!COMP:*,-PHI']
Merjaa:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'PF:Merjaa', 'SPEC:A']

C:['!COMP:*', '!PROBE:CAT:T/fin', '-', '-SPEC:C/fin', '-SPEC:N', '-SPEC:T/fin', 'CAT:C/fin', 'CAT:C/fin/Q', 'CAT:Q', 'COMP:T/fin', 'LANG:FI', 'LF:C/fin', 'PF:C', 'SPEC:*']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D']
Pekka:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Pekka', 'PF:Pekka', 'SPEC:A']
T:['!COMP:*', '!PROBE:CAT:V', '!SPEC:*', '+PHI', '-COMP:D', '-SPEC:FORCE', '-SPEC:N', '-SPEC:T/fin', '-SPEC:V', 'CAT:T/fin', 'COMP:V', 'COMP:v', 'LANG:FI', 'LF:T', 'NUM:sg', 'PER:3', 'PF:T']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:T/fin,!COMP:*', 'null']
Pekka:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Pekka', 'PF:Pekka', 'SPEC:A', 'null']
v:['!COMP:*', '!PROBE:CAT:D', '!PROBE:CAT:V', '!SPEC:D', '-PHI', '-SPEC:N', 'CAT:v', 'COMP:V', 'LANG:FI', 'LF:v', 'PF:v']
ihailee:['!COMP:D', '-COMP:ADV', '-COMP:N', '-COMP:V', '-SPEC:FORCE', '-SPEC:T/fin', 'CAT:V', 'COMP:P', 'LANG:FI', 'LF:admire', 'PF:ihailee', 'SPEC:ADV', 'SPEC:D', 'SPEC:P']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:!COMP:*,-PHI']
Merjaa:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'PF:Merjaa', 'SPEC:A']

C: [C/finQ]
D: [D, C/finQ]
Pekka: [N, D, C/finQ]
T: [T/fin, C/finQ]
(D): [D, T/fin, C/finQ]
(N): [N, D, T/fin, C/finQ]
v: [v, T/fin, C/finQ]
ihailee: [V, v, T/fin, C/finQ]
D: [D, V, v, T/fin, C/finQ]
Merjaa: [N, D, V, v, T/fin, C/finQ]

			Checking if the sentence is ambiguous...


\========================================================================
# 3
['Pekka', 'antoi', 'kirjan', 'Merjalle']


			=None

1.

		Next word contains multiple morphemes ['$nom', '$D', 'Pekka-']
		Storing inflectional feature ['-', 'LANG:FI', 'TAIL:CAT:T/fin,!COMP:*'] into working memory.

		Consume "$D"

			=None

2.

		Adding inflectional features to D
		= ['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:T/fin,!COMP:*']
			=D

3.

		Consume "Pekka"

		D + Pekka
			Filtering out impossible merge sites...
			Sink "Pekka" into D because they are inside the same phonological word.
		Exploring solution number (1) =[D*Pekka]
			=D{N}

4.

		Next word contains multiple morphemes ['$T/fin', '$v', 'anta-']

		Consume "T"

		D{N} + T
			Filtering out impossible merge sites...
			=[[D Pekka] T]

5.

		Consume "v"

		[[D Pekka] T] + v
			Filtering out impossible merge sites...
			Sink "v" into T because they are inside the same phonological word.
		Exploring solution number (1) =[T*v]
			=[[D Pekka] T{v}]

6.

		Consume "antaa"

		[[D Pekka] T{v}] + antaa
			Filtering out impossible merge sites...
			Sink "antaa" into T{v} because they are inside the same phonological word.
		Exploring solution number (1) =[T{v}*antaa]
			=[[D Pekka] T{v,V}]

7.

		Next word contains multiple morphemes ['$asp', '$D', 'kirja-']
		Storing inflectional feature ['-', 'LANG:FI', 'TAIL:CAT:v,!COMP:*'] into working memory.

		Consume "$D"

			=[[D Pekka] T{v,V}]

8.

		Adding inflectional features to D
		= ['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:v,!COMP:*']

		Consume "D"

		[[D Pekka] T{v,V}] + D
			Filtering out impossible merge sites...
				Reject [[<D Pekka> [T [<D Pekka> [v antaa]]]] D] due to bad left branch.
			=[[D Pekka] [T{v,V} D]]

9.

		Consume "kirja"

		[[D Pekka] [T{v,V} D]] + kirja
			Filtering out impossible merge sites...
			Sink "kirja" into D because they are inside the same phonological word.
		Exploring solution number (1) =[D*kirja]
			=[[D Pekka] [T{v,V} D{N}]]

10.

		Next word contains multiple morphemes ['$lle', '$D', 'Merja-']

		Consume "P(lle)"

		[[D Pekka] [T{v,V} D{N}]] + P(lle)
			Filtering out impossible merge sites...
			Ranking remaining sites...
				Avoid T/finP as SPEC, P(lle)
				Avoid T/finP as SPEC, P(lle)
				An EPP-head "T" lacks specifier but needs one.
				An EPP-head "v" lacks specifier D that it requires.
				Avoid [T [v [antaa [D kirja]]]] as left branch because it constitutes illicit structure.
		Ranking completed:
			1. [D{N}; P(lle)]
			2. [[[D Pekka] [T{v,V} D{N}]]; P(lle)]
			3. [[T{v,V} D{N}]; P(lle)]
			=[[D Pekka] [T{v,V} [[D kirja] P(lle)]]]

11.

		Consume "D"

		[[D Pekka] [T{v,V} [[D kirja] P(lle)]]] + D
			Filtering out impossible merge sites...
			Sink "D" into P(lle) because they are inside the same phonological word.
		Exploring solution number (1) =[P(lle)*D]
			=[[D Pekka] [T{v,V} [[D kirja] P(lle){D}]]]

12.

		Consume "Merja-"

		[[D Pekka] [T{v,V} [[D kirja] P(lle){D}]]] + Merja-
			Filtering out impossible merge sites...
			Sink "Merja-" into P(lle){D} because they are inside the same phonological word.
		Exploring solution number (1) =[P(lle){D}*Merja-]
			=[[D Pekka] [T{v,V} [[D kirja] P(lle){D,N}]]]

13.
	>>>	Trying candidate parse [[D Pekka] [T{v,V} [[D kirja] P(lle){D,N}]]] (1.)
		Reversing movement.
			!Reconstructing head movement for [[D Pekka] [T{v,V} [[D kirja] P(lle){D,N}]]].
				Extracted head "v{V}" and reconstructed it = [[D Pekka] [T [v{V} [[D kirja] P(lle){D,N}]]]]
				Extracted head "antaa" and reconstructed it = [[D Pekka] [T [v [antaa [[D kirja] P(lle){D,N}]]]]]
				Extracted head "D{N}" from P(lle) and created [[D Pekka] [T [v [antaa [[D kirja] [P(lle) D{N}]]]]]]
			!Reconstructing head movement for D{N}.
				Extracted head "Merja-" from D and created [[D Pekka] [T [v [antaa [[D kirja] [P(lle) [D Merja-]]]]]]]
			!Dropping floaters...
				[D Pekka] failed to tail [!COMP:*][CAT:T/fin]
				<D Pekka> was made an adjunct.
				Floater <D Pekka> dropped.
				= [<D Pekka> [T [<D Pekka> [v [antaa [[D kirja] [P(lle) [D Merja-]]]]]]]]
			!Dropping A-/A-bar movement with Chesi memory buffer.
				Moving "D kirja " into memory buffer from SPEC of P(lle).
				Memory buffer: [[D N]]
				[D kirja]" has no thematic role
				Extraposition will be tried on [<D Pekka>:1 [T [<DP>:1 [v [antaa [[D kirja] [P(lle) [D Merja-]]]]]]]].
				<P(lle) [D Merja-]> was made adjunct by an extraposition rule.
			= [<D Pekka> [T [<D Pekka> [v [antaa [[D kirja] <P(lle) [D Merja-]>]]]]]]
		Checking LF-interface conditions.
			Trying to transfer [<D Pekka>:1 [T [<DP>:1 [v [antaa [[D kirja] <P(lle) [D Merja-]>]]]]]] into LF...
				Transfer to LF successful.
!--->		Tests passed (with 13/111 operations) <------------------------------------
		Solution:
		[<D Pekka> [T [<D Pekka> [v [antaa [[D kirja] <P(lle) [D Merja-]>]]]]]]
		Grammar: [<D Pekka>:1 [T [<DP>:1 [v [antaa [[D kirja] <P(lle) [D Merja-]>]]]]]]
		Spellout T/finP = [DP:1 [T/fin [__:1 [v [V [[D N] PP]]]]]]
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D']
Pekka:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Pekka', 'PF:Pekka', 'SPEC:A']
T:['!COMP:*', '!PROBE:CAT:V', '!SPEC:*', '+PHI', '-COMP:D', '-SPEC:FORCE', '-SPEC:N', '-SPEC:T/fin', '-SPEC:V', 'CAT:T/fin', 'COMP:V', 'COMP:v', 'LANG:FI', 'LF:T', 'NUM:sg', 'PER:3', 'PF:T']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:T/fin,!COMP:*', 'null']
Pekka:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Pekka', 'PF:Pekka', 'SPEC:A', 'null']
v:['!COMP:*', '!PROBE:CAT:D', '!PROBE:CAT:V', '!SPEC:D', '-PHI', '-SPEC:N', 'CAT:v', 'COMP:V', 'LANG:FI', 'LF:v', 'PF:v']
antaa:['-COMP:ADV', '-COMP:N', '-COMP:V', '-SPEC:FORCE', '-SPEC:T/fin', 'CAT:V', 'COMP:D', 'COMP:P', 'LANG:FI', 'LF:give', 'PF:antaa', 'SPEC:ADV', 'SPEC:D', 'SPEC:P']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:v,!COMP:*']
kirja:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:book', 'PF:kirja', 'SPEC:A']
P(lle):['!COMP:*', '+SEM:directional', '-COMP:ADV', '-COMP:N', '-COMP:T/fin', '-COMP:uWH', '-SPEC:ADV', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:T/fin', '-SPEC:V', '-SPEC:iR', '-SPEC:iWH', '-SPEC:v', 'CAT:P', 'COMP:D', 'COMP:INF', 'LANG:FI', 'LF:for', 'PF:P(lle)', 'SPEC:*']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D']
Merja-:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Merja', 'PF:Merja-', 'SPEC:A']

D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D']
Pekka:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Pekka', 'PF:Pekka', 'SPEC:A']
T:['!COMP:*', '!PROBE:CAT:V', '!SPEC:*', '+PHI', '-COMP:D', '-SPEC:FORCE', '-SPEC:N', '-SPEC:T/fin', '-SPEC:V', 'CAT:T/fin', 'COMP:V', 'COMP:v', 'LANG:FI', 'LF:T', 'NUM:sg', 'PER:3', 'PF:T']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:T/fin,!COMP:*', 'null']
Pekka:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Pekka', 'PF:Pekka', 'SPEC:A', 'null']
v:['!COMP:*', '!PROBE:CAT:D', '!PROBE:CAT:V', '!SPEC:D', '-PHI', '-SPEC:N', 'CAT:v', 'COMP:V', 'LANG:FI', 'LF:v', 'PF:v']
antaa:['-COMP:ADV', '-COMP:N', '-COMP:V', '-SPEC:FORCE', '-SPEC:T/fin', 'CAT:V', 'COMP:D', 'COMP:P', 'LANG:FI', 'LF:give', 'PF:antaa', 'SPEC:ADV', 'SPEC:D', 'SPEC:P']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:v,!COMP:*']
kirja:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:book', 'PF:kirja', 'SPEC:A']
P(lle):['!COMP:*', '+SEM:directional', '-COMP:ADV', '-COMP:N', '-COMP:T/fin', '-COMP:uWH', '-SPEC:ADV', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:T/fin', '-SPEC:V', '-SPEC:iR', '-SPEC:iWH', '-SPEC:v', 'CAT:P', 'COMP:D', 'COMP:INF', 'LANG:FI', 'LF:for', 'PF:P(lle)', 'SPEC:*']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D']
Merja-:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Merja', 'PF:Merja-', 'SPEC:A']

D: [D]
Pekka: [N, D]
T: [T/fin]
(D): [D, T/fin]
(N): [N, D, T/fin]
v: [v, T/fin]
antaa: [V, v, T/fin]
D: [D, V, v, T/fin]
kirja: [N, D, V, v, T/fin]
P(lle): [P, V, v, T/fin]
D: [D, P, V, v, T/fin]
Merja-: [N, D, P, V, v, T/fin]

			Checking if the sentence is ambiguous...


\========================================================================
# 4
['ANTOI', 'Pekka', 'kirjan', 'Merjalle']


			=None

1.

		Next word contains multiple morphemes ['$Q', '$C/fin', '$T/fin', '$v', 'anta-']
		Storing inflectional feature ['-', 'CAT:Q', 'LANG:FI'] into working memory.

		Consume "$C/fin"

			=None

2.

		Adding inflectional features to C
		= ['!COMP:*', '!PROBE:CAT:T/fin', '-', '-SPEC:C/fin', '-SPEC:N', '-SPEC:T/fin', 'CAT:C/fin', 'CAT:C/fin/Q', 'CAT:Q', 'COMP:T/fin', 'LANG:FI', 'LF:C/fin', 'PF:C', 'SPEC:*']
			=C

3.

		Consume "T"

		C + T
			Filtering out impossible merge sites...
			Sink "T" into C because they are inside the same phonological word.
		Exploring solution number (1) =[C*T]
			=C{T/fin}

4.

		Consume "v"

		C{T/fin} + v
			Filtering out impossible merge sites...
			Sink "v" into C{T/fin} because they are inside the same phonological word.
		Exploring solution number (1) =[C{T/fin}*v]
			=C{T/fin,v}

5.

		Consume "antaa"

		C{T/fin,v} + antaa
			Filtering out impossible merge sites...
			Sink "antaa" into C{T/fin,v} because they are inside the same phonological word.
		Exploring solution number (1) =[C{T/fin,v}*antaa]
			=C{T/fin,v,V}

6.

		Next word contains multiple morphemes ['$nom', '$D', 'Pekka-']
		Storing inflectional feature ['-', 'LANG:FI', 'TAIL:CAT:T/fin,!COMP:*'] into working memory.

		Consume "$D"

			=C{T/fin,v,V}

7.

		Adding inflectional features to D
		= ['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:T/fin,!COMP:*']

		Consume "D"

		C{T/fin,v,V} + D
			Filtering out impossible merge sites...
			=[C{T/fin,v,V} D]

8.

		Consume "Pekka"

		[C{T/fin,v,V} D] + Pekka
			Filtering out impossible merge sites...
			Sink "Pekka" into D because they are inside the same phonological word.
		Exploring solution number (1) =[D*Pekka]
			=[C{T/fin,v,V} D{N}]

9.

		Next word contains multiple morphemes ['$asp', '$D', 'kirja-']
		Storing inflectional feature ['-', 'LANG:FI', 'TAIL:CAT:v,!COMP:*'] into working memory.

		Consume "$D"

			=[C{T/fin,v,V} D{N}]

10.

		Adding inflectional features to D
		= ['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:v,!COMP:*']

		Consume "D"

		[C{T/fin,v,V} D{N}] + D
			Filtering out impossible merge sites...
				Reject [[C{T/fin,v,V} <D Pekka>] D] due to bad left branch.
			=[C{T/fin,v,V} [[D Pekka] D]]

11.

		Consume "kirja"

		[C{T/fin,v,V} [[D Pekka] D]] + kirja
			Filtering out impossible merge sites...
			Sink "kirja" into D because they are inside the same phonological word.
		Exploring solution number (1) =[D*kirja]
			=[C{T/fin,v,V} [[D Pekka] D{N}]]

12.

		Next word contains multiple morphemes ['$lle', '$D', 'Merja-']

		Consume "P(lle)"

		[C{T/fin,v,V} [[D Pekka] D{N}]] + P(lle)
			Filtering out impossible merge sites...
			Ranking remaining sites...
				Avoid [[D Pekka] D{N}] because it could break words.
		Ranking completed:
			1. [D{N}; P(lle)]
			2. [[C{T/fin,v,V} [[D Pekka] D{N}]]; P(lle)]
			3. [[[D Pekka] D{N}]; P(lle)]
			=[C{T/fin,v,V} [[D Pekka] [[D kirja] P(lle)]]]

13.

		Consume "D"

		[C{T/fin,v,V} [[D Pekka] [[D kirja] P(lle)]]] + D
			Filtering out impossible merge sites...
			Sink "D" into P(lle) because they are inside the same phonological word.
		Exploring solution number (1) =[P(lle)*D]
			=[C{T/fin,v,V} [[D Pekka] [[D kirja] P(lle){D}]]]

14.

		Consume "Merja-"

		[C{T/fin,v,V} [[D Pekka] [[D kirja] P(lle){D}]]] + Merja-
			Filtering out impossible merge sites...
			Sink "Merja-" into P(lle){D} because they are inside the same phonological word.
		Exploring solution number (1) =[P(lle){D}*Merja-]
			=[C{T/fin,v,V} [[D Pekka] [[D kirja] P(lle){D,N}]]]

15.
	>>>	Trying candidate parse [C{T/fin,v,V} [[D Pekka] [[D kirja] P(lle){D,N}]]] (1.)
		Reversing movement.
			!Reconstructing head movement for [C{T/fin,v,V} [[D Pekka] [[D kirja] P(lle){D,N}]]].
				Extracted head "T{v,V}" and reconstructed it = [C [[D Pekka] [T{v,V} [[D kirja] P(lle){D,N}]]]]
				Extracted head "v{V}" and reconstructed it = [C [[D Pekka] [T [v{V} [[D kirja] P(lle){D,N}]]]]]
				Extracted head "antaa" and reconstructed it = [C [[D Pekka] [T [v [antaa [[D kirja] P(lle){D,N}]]]]]]
				Extracted head "D{N}" from P(lle) and created [C [[D Pekka] [T [v [antaa [[D kirja] [P(lle) D{N}]]]]]]]
			!Reconstructing head movement for D{N}.
				Extracted head "Merja-" from D and created [C [[D Pekka] [T [v [antaa [[D kirja] [P(lle) [D Merja-]]]]]]]]
			!Dropping floaters...
				[D Pekka] failed to tail [!COMP:*][CAT:T/fin]
				<D Pekka> was made an adjunct.
				Floater <D Pekka> dropped.
				= [C [<D Pekka> [T [<D Pekka> [v [antaa [[D kirja] [P(lle) [D Merja-]]]]]]]]]
			!Dropping A-/A-bar movement with Chesi memory buffer.
				Moving "D kirja " into memory buffer from SPEC of P(lle).
				Memory buffer: [[D N]]
				[D kirja]" has no thematic role
				Extraposition will be tried on [C [<D Pekka>:1 [T [<DP>:1 [v [antaa [[D kirja] [P(lle) [D Merja-]]]]]]]]].
				<P(lle) [D Merja-]> was made adjunct by an extraposition rule.
			= [C [<D Pekka> [T [<D Pekka> [v [antaa [[D kirja] <P(lle) [D Merja-]>]]]]]]]
		Checking LF-interface conditions.
			Trying to transfer [C [<D Pekka>:1 [T [<DP>:1 [v [antaa [[D kirja] <P(lle) [D Merja-]>]]]]]]] into LF...
				Transfer to LF successful.
!--->		Tests passed (with 15/121 operations) <------------------------------------
		Solution:
		[C [<D Pekka> [T [<D Pekka> [v [antaa [[D kirja] <P(lle) [D Merja-]>]]]]]]]
		Grammar: [C [<D Pekka>:1 [T [<DP>:1 [v [antaa [[D kirja] <P(lle) [D Merja-]>]]]]]]]
		Spellout C/finQP = [C/finQ [DP:1 [T/fin [__:1 [v [V [[D N] PP]]]]]]]
C:['!COMP:*', '!PROBE:CAT:T/fin', '-', '-SPEC:C/fin', '-SPEC:N', '-SPEC:T/fin', 'CAT:C/fin', 'CAT:C/fin/Q', 'CAT:Q', 'COMP:T/fin', 'LANG:FI', 'LF:C/fin', 'PF:C', 'SPEC:*']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D']
Pekka:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Pekka', 'PF:Pekka', 'SPEC:A']
T:['!COMP:*', '!PROBE:CAT:V', '!SPEC:*', '+PHI', '-COMP:D', '-SPEC:FORCE', '-SPEC:N', '-SPEC:T/fin', '-SPEC:V', 'CAT:T/fin', 'COMP:V', 'COMP:v', 'LANG:FI', 'LF:T', 'NUM:sg', 'PER:3', 'PF:T']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:T/fin,!COMP:*', 'null']
Pekka:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Pekka', 'PF:Pekka', 'SPEC:A', 'null']
v:['!COMP:*', '!PROBE:CAT:D', '!PROBE:CAT:V', '!SPEC:D', '-PHI', '-SPEC:N', 'CAT:v', 'COMP:V', 'LANG:FI', 'LF:v', 'PF:v']
antaa:['-COMP:ADV', '-COMP:N', '-COMP:V', '-SPEC:FORCE', '-SPEC:T/fin', 'CAT:V', 'COMP:D', 'COMP:P', 'LANG:FI', 'LF:give', 'PF:antaa', 'SPEC:ADV', 'SPEC:D', 'SPEC:P']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:v,!COMP:*']
kirja:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:book', 'PF:kirja', 'SPEC:A']
P(lle):['!COMP:*', '+SEM:directional', '-COMP:ADV', '-COMP:N', '-COMP:T/fin', '-COMP:uWH', '-SPEC:ADV', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:T/fin', '-SPEC:V', '-SPEC:iR', '-SPEC:iWH', '-SPEC:v', 'CAT:P', 'COMP:D', 'COMP:INF', 'LANG:FI', 'LF:for', 'PF:P(lle)', 'SPEC:*']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D']
Merja-:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Merja', 'PF:Merja-', 'SPEC:A']

C:['!COMP:*', '!PROBE:CAT:T/fin', '-', '-SPEC:C/fin', '-SPEC:N', '-SPEC:T/fin', 'CAT:C/fin', 'CAT:C/fin/Q', 'CAT:Q', 'COMP:T/fin', 'LANG:FI', 'LF:C/fin', 'PF:C', 'SPEC:*']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D']
Pekka:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Pekka', 'PF:Pekka', 'SPEC:A']
T:['!COMP:*', '!PROBE:CAT:V', '!SPEC:*', '+PHI', '-COMP:D', '-SPEC:FORCE', '-SPEC:N', '-SPEC:T/fin', '-SPEC:V', 'CAT:T/fin', 'COMP:V', 'COMP:v', 'LANG:FI', 'LF:T', 'NUM:sg', 'PER:3', 'PF:T']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:T/fin,!COMP:*', 'null']
Pekka:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Pekka', 'PF:Pekka', 'SPEC:A', 'null']
v:['!COMP:*', '!PROBE:CAT:D', '!PROBE:CAT:V', '!SPEC:D', '-PHI', '-SPEC:N', 'CAT:v', 'COMP:V', 'LANG:FI', 'LF:v', 'PF:v']
antaa:['-COMP:ADV', '-COMP:N', '-COMP:V', '-SPEC:FORCE', '-SPEC:T/fin', 'CAT:V', 'COMP:D', 'COMP:P', 'LANG:FI', 'LF:give', 'PF:antaa', 'SPEC:ADV', 'SPEC:D', 'SPEC:P']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D', 'TAIL:CAT:v,!COMP:*']
kirja:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:book', 'PF:kirja', 'SPEC:A']
P(lle):['!COMP:*', '+SEM:directional', '-COMP:ADV', '-COMP:N', '-COMP:T/fin', '-COMP:uWH', '-SPEC:ADV', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:T/fin', '-SPEC:V', '-SPEC:iR', '-SPEC:iWH', '-SPEC:v', 'CAT:P', 'COMP:D', 'COMP:INF', 'LANG:FI', 'LF:for', 'PF:P(lle)', 'SPEC:*']
D:['!COMP:*', '!PROBE:CAT:N', '+PHI', '-COMP:T/fin', '-COMP:uR', '-PHI', '-SPEC:*', 'CAT:D', 'COMP:N', 'LANG:FI', 'LF:D', 'PF:D']
Merja-:['-COMP:ADV', '-COMP:AUX', '-COMP:D', '-COMP:N', '-COMP:P', '-COMP:T/fin', '-COMP:V', '-COMP:WH', '-COMP:v', '-SEM:directional', '-SPEC:ADV', '-SPEC:C/fin', '-SPEC:FORCE', '-SPEC:INF', '-SPEC:N', '-SPEC:P', '-SPEC:R', '-SPEC:T/fin', '-SPEC:V', '-SPEC:uWH', 'CAT:N', 'COMP:R', 'COMP:R/D', 'COMP:uR', 'LANG:FI', 'LF:Merja', 'PF:Merja-', 'SPEC:A']

C: [C/finQ]
D: [D, C/finQ]
Pekka: [N, D, C/finQ]
T: [T/fin, C/finQ]
(D): [D, T/fin, C/finQ]
(N): [N, D, T/fin, C/finQ]
v: [v, T/fin, C/finQ]
antaa: [V, v, T/fin, C/finQ]
D: [D, V, v, T/fin, C/finQ]
kirja: [N, D, V, v, T/fin, C/finQ]
P(lle): [P, V, v, T/fin, C/finQ]
D: [D, P, V, v, T/fin, C/finQ]
Merja-: [N, D, P, V, v, T/fin, C/finQ]

			Checking if the sentence is ambiguous...
