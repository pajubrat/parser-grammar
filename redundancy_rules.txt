
# Universal lexical redundancy rules
# Key = antecedent condition
# Value = automatically added features (if not already existing)
#			COMP:X		accept X as a complement		(e.g. T/fin accepts vP as complement) 
# 			-COMP:X		don't accept X as a complement	(e.g. v does not accept AdvP complements)
#			!COMP:* 	require complement				(general property of all functional heads)
#           !COMP:X		X is a mandatory complement		(e.g. v requires VP)
#			-COMP:*		does not accept any complement 	(e.g. pronouns)

#			SPEC:X		accept X as specifier			(e.g. v accepts DP) 
#           -SPEC:X, 	don't accept specifier X		(e.g. v does not take T/fin specifiers)
#           -SPEC:*, 	accept nothing at Spec			(e.g. English preposition)
#			SPEC:*, 	accept anything at Spec			(e.g. Finnish pied-piping edge)
#			!SPEC:*, 	require something at Spec 		(e.g. Finnish finite clause EPP)
#			!SPEC:X, 	require X at Spec 				(e.g. English finite clause EPP)

#			-COMP:*		don't accept complements		(recursion stopper -- not attested?) 
#			COMP:*		accept anything as complement	(completely ignorant -- not attested?)

#			+PHI		Triggers generalized phi-Agree	
#			PHI:0		phi hosting not possible		(Triggers A-reconstruction)

CAT:FORCE :: CAT:FIN !COMP:* -SPEC:* !PROBE:CAT:T/fin
CAT:C/fin :: CAT:FIN !COMP:* COMP:T/fin !PROBE:CAT:FIN -SPEC:T/fin -SPEC:C/fin -SPEC:N
CAT:T/fin :: CAT:FIN NUM:sg PER:3 !COMP:* -COMP:D COMP:v COMP:V !PROBE:CAT:V -SPEC:N -SPEC:T/fin -SPEC:FORCE -SPEC:V
CAT:Neg/fin :: CAT:FIN CAT:NEG
CAT:T	:: !COMP:* -COMP:D COMP:v COMP:V !PROBE:CAT:V -SPEC:N -SPEC:T/fin -SPEC:FORCE -SPEC:V +PHI
CAT:v   :: !COMP:* COMP:V !PROBE:CAT:V !SPEC:D -SPEC:N -PHI !PROBE:CAT:D
CAT:v/pro  :: !COMP:* !PROBE:CAT:V SPEC:D -SPEC:N -PHI
CAT:V   :: -COMP:ADV -SPEC:T/fin -SPEC:FORCE SPEC:ADV -COMP:N -COMP:V SPEC:P COMP:P
CAT:D   :: !COMP:* -SPEC:* -SPEC:N COMP:N -COMP:T/fin -COMP:uR !PROBE:CAT:N +PHI
CAT:N   :: -COMP:P -COMP:AUX -SPEC:FORCE  SPEC:A COMP:R COMP:R/D -COMP:D -COMP:N -SPEC:uWH -SPEC:R -COMP:T/fin -SPEC:V -COMP:V -COMP:v -SPEC:INF -SPEC:P -SPEC:N -SPEC:C/fin -SPEC:T/fin COMP:uR -SPEC:ADV -COMP:WH -COMP:ADV
CAT:P   :: !COMP:* COMP:D COMP:INF -COMP:N -COMP:ADV -COMP:T/fin -SPEC:iR -SPEC:iWH -SPEC:ADV -SPEC:T/fin -SPEC:N -SPEC:P -SPEC:INF -SPEC:V -SPEC:FORCE -SPEC:v -COMP:uWH
CAT:INF	::	!COMP:* COMP:v COMP:V !PROBE:CAT:V !SPEC:D -COMP:FORCE -COMP:C/fin -SPEC:WH -SPEC:T/fin -SPEC:V
CAT:WH  :: -COMP:C/fin ABAR:WH -COMP:ADV
CAT:uWH :: !COMP:* -SPEC:T/fin SPEC:*
CAT:R   :: -COMP:C/fin ABAR:R
CAT:uR  :: !COMP:* !SPEC:* TAIL:CAT:D
CAT:ADV :: !COMP:* OPEN -SPEC:N -SPEC:V -SPEC:T/fin -SPEC:FORCE TAIL:CAT:V
CAT:Pos :: !SPEC:D COMP:N -SPEC:N !PROBE:CAT:N
CAT:PHI	:: -COMP:*
CAT:A/inf :: !COMP:* COMP:V COMP:v +PHI PHI:0 SPEC:D -SPEC:Neg/fin -SPEC:T/fin
UNERG	:: !SPEC:D
UNACC	:: !COMP:D
FOC		:: ABAR:FOC